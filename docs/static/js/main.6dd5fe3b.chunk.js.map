{"version":3,"sources":["app/App.module.scss","app/actions/applications.ts","app/actions/categories.ts","app/App.tsx","app/reducers/applications.ts","app/reducers/categories.ts","app/contexts/AppContext.ts","app/components/Application/Application.tsx","config.ts","app/services/PathBuilder.ts","app/components/CategoriesList/CategoriesList.tsx","app/components/Category/Category.tsx","app/components/Home/Home.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ApplicationsActions","CategoriesActions","APP_ROUTES","InitialApplicationsState","loading","error","data","LoadingApplications","state","payload","status","LoadingApplicationsSucceed","LoadingApplicationsFailed","applications","action","type","FETCH","FETCH_SUCCEED","FETCH_FAILD","InitialCategoriesState","LoadingCategories","LoadingCategoriesSucceed","LoadingCategoriesFailed","categories","AppContext","createContext","dispatches","Application","useContext","console","log","PathBuilder","path","config","CategoriesList","to","build","Categoty","Home","rawCategories","require","rawApplications","App","useReducer","categoriesState","categoriesDispatch","applicationsState","applicationsDispatch","useEffect","setTimeout","FetchCategoriesSucceedAction","FetchApplicationsAction","FetchApplicationsSucceedAction","Provider","value","className","styles","container","content","exact","HOME","component","CATEGORY","APPLICATION","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6dd5fe3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3i0jS\",\"categories-list\":\"App_categories-list__1RlVS\",\"content\":\"App_content__SA4IH\"};","export enum ApplicationsActions {\r\n  FETCH = \"APPLICATIONS_FETCH\",\r\n  FETCH_SUCCEED = \"APPLICATIONS_FETCH_SUCCEED\",\r\n  FETCH_FAILD = \"APPLICATIONS_FETCH_FAILD\"\r\n}\r\n\r\nexport type ApplicationsAction<T = any> = {\r\n  type: ApplicationsActions;\r\n  payload: T;\r\n};\r\n\r\nexport type ApplicationsDispatch = React.Dispatch<ApplicationsAction>;\r\n\r\n// ---------------------------------\r\n\r\nexport type FetchApplicationsPayload = {status: boolean};\r\n\r\nexport const FetchApplicationsAction = (\r\n  payload: FetchApplicationsPayload,\r\n): ApplicationsAction<FetchApplicationsPayload> => ({\r\n  type: ApplicationsActions.FETCH,\r\n  payload,\r\n});\r\n\r\n// ---------------------------------\r\n\r\nexport type FetchApplicationsSucceedPayload = any;\r\n\r\nexport const FetchApplicationsSucceedAction = (\r\n  payload: FetchApplicationsSucceedPayload,\r\n): ApplicationsAction<FetchApplicationsPayload> => ({\r\n  type: ApplicationsActions.FETCH_SUCCEED,\r\n  payload,\r\n});\r\n\r\n// ---------------------------------\r\n\r\nexport type FetchApplicationsFailedPayload = any;\r\n\r\nexport const FetchApplicationsFaildAction = (\r\n  payload: FetchApplicationsFailedPayload,\r\n): ApplicationsAction<FetchApplicationsPayload> => ({\r\n  type: ApplicationsActions.FETCH_FAILD,\r\n  payload,\r\n});","export enum CategoriesActions {\r\n  FETCH = \"CATEGORIES_FETCH\",\r\n  FETCH_SUCCEED = \"CATEGORIES_FETCH_SUCCEED\",\r\n  FETCH_FAILD = \"CATEGORIES_FETCH_FAILD\"\r\n}\r\n\r\nexport type CategoriesAction<T = any> = {\r\n  type: CategoriesActions;\r\n  payload: T;\r\n};\r\n\r\nexport type CategoriesDispatch = React.Dispatch<CategoriesAction>;\r\n\r\n// ---------------------------------\r\n\r\nexport type FetchCategoriesPayload = {status: boolean};\r\n\r\nexport const FetchCategoriesAction = (\r\n  payload: FetchCategoriesPayload,\r\n): CategoriesAction<FetchCategoriesPayload> => ({\r\n  type: CategoriesActions.FETCH,\r\n  payload,\r\n});\r\n\r\n// ---------------------------------\r\n\r\nexport type FetchCategoriesSucceedPayload = any;\r\n\r\nexport const FetchCategoriesSucceedAction = (\r\n  payload: FetchCategoriesSucceedPayload,\r\n): CategoriesAction<FetchCategoriesPayload> => ({\r\n  type: CategoriesActions.FETCH_SUCCEED,\r\n  payload,\r\n});\r\n\r\n// ---------------------------------\r\n\r\nexport type FetchCategoriesFailedPayload = any;\r\n\r\nexport const FetchCategoriesFaildAction = (\r\n  payload: FetchCategoriesFailedPayload,\r\n): CategoriesAction<FetchCategoriesPayload> => ({\r\n  type: CategoriesActions.FETCH_FAILD,\r\n  payload,\r\n});","import React, { FC, useEffect, useReducer } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { FetchApplicationsAction, FetchApplicationsSucceedAction } from './actions/applications';\nimport { FetchCategoriesAction, FetchCategoriesSucceedAction } from './actions/categories';\n\nimport styles from './App.module.scss';\n\nimport Application from './components/Application/Application';\nimport CategoriesList from './components/CategoriesList/CategoriesList';\nimport Categoty from './components/Category/Category';\nimport Home from './components/Home/Home';\nimport { AppContext } from './contexts/AppContext';\nimport { applications, InitialApplicationsState } from './reducers/applications';\nimport { categories, InitialCategoriesState } from './reducers/categories';\nimport PathBuilder from './services/PathBuilder';\n\nlet rawCategories = require('../categories.json');\nlet rawApplications = require('../applications.json');\n\nenum APP_ROUTES {\n  HOME = '/',\n  CATEGORY = '/:category',\n  APPLICATION = '/:category/:application',\n}\n\nconst App: FC = () => {\n  const [categoriesState, categoriesDispatch] = useReducer(categories, InitialCategoriesState);\n  const [applicationsState, applicationsDispatch] = useReducer(applications, InitialApplicationsState);\n\n  useEffect(() => {\n\n    categoriesDispatch(FetchCategoriesAction({status: true}));\n    setTimeout(() => {\n      categoriesDispatch(FetchCategoriesSucceedAction(rawCategories.categories));\n    }, 1000)\n\n    applicationsDispatch(FetchApplicationsAction({status: true}));\n    setTimeout(() => {\n      applicationsDispatch(FetchApplicationsSucceedAction(rawApplications.applications));\n    }, 1000)\n  }, [])\n\n  return (\n    <AppContext.Provider value={\n      {\n        state: {\n          categories: categoriesState,\n          applications: applicationsState\n        },\n        dispatches: {\n          categories: categoriesDispatch,\n          applications: applicationsDispatch\n        }\n      }\n    }>\n      <main className={styles.container}>\n        <Router>\n          <aside className={styles['categories-list']}>\n            <CategoriesList />\n          </aside>\n          <section className={styles.content}>\n            <Switch>\n              <Route exact path={PathBuilder.build(APP_ROUTES.HOME)} component={Home} />\n              <Route exact path={PathBuilder.build(APP_ROUTES.CATEGORY)} component={Categoty} />\n              <Route exact path={PathBuilder.build(APP_ROUTES.APPLICATION)} component={Application} />\n\n              <Route path=\"*\">\n                <Redirect to={PathBuilder.build(APP_ROUTES.HOME)} />\n              </Route>\n            </Switch>\n          </section>\n        </Router>\n      </main>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","import { ApplicationsAction, ApplicationsActions, FetchApplicationsFailedPayload, FetchApplicationsPayload, FetchApplicationsSucceedPayload } from \"../actions/applications\";\r\n\r\ntype Application = any;\r\n\r\nexport type ApplicationsState = {\r\n  loading: boolean;\r\n  error: any;\r\n  data: Application[];\r\n};\r\n\r\nexport const InitialApplicationsState: ApplicationsState = {\r\n  loading: false,\r\n  error: null,\r\n  data: [],\r\n};\r\n\r\nconst LoadingApplications = (\r\n  state: ApplicationsState,\r\n  payload: FetchApplicationsPayload,\r\n) => ({ ...state, loading: payload.status });\r\n\r\nconst LoadingApplicationsSucceed = (\r\n  state: ApplicationsState,\r\n  payload: FetchApplicationsSucceedPayload,\r\n) => ({ ...state, data: payload, error: null, loading: false });\r\n\r\nconst LoadingApplicationsFailed = (\r\n  state: ApplicationsState,\r\n  payload: FetchApplicationsFailedPayload,\r\n) => ({ ...state, data: [], error: payload, loading: false });\r\n\r\nexport const applications = (\r\n  state: ApplicationsState = InitialApplicationsState,\r\n  action: ApplicationsAction,\r\n) => {\r\n  switch (action.type) {\r\n    case ApplicationsActions.FETCH:\r\n      return LoadingApplications(state, action.payload);\r\n    case ApplicationsActions.FETCH_SUCCEED:\r\n      return LoadingApplicationsSucceed(state, action.payload);\r\n    case ApplicationsActions.FETCH_FAILD:\r\n      return LoadingApplicationsFailed(state, action.payload);\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import { CategoriesAction, CategoriesActions, FetchCategoriesFailedPayload, FetchCategoriesPayload, FetchCategoriesSucceedPayload } from \"../actions/categories\";\r\n\r\ntype Category = any;\r\n\r\nexport type CategoriesState = {\r\n  loading: boolean;\r\n  error: any;\r\n  data: Category[];\r\n};\r\n\r\nexport const InitialCategoriesState: CategoriesState = {\r\n  loading: false,\r\n  error: null,\r\n  data: [],\r\n};\r\n\r\nconst LoadingCategories = (\r\n  state: CategoriesState,\r\n  payload: FetchCategoriesPayload,\r\n) => ({ ...state, loading: payload.status });\r\n\r\nconst LoadingCategoriesSucceed = (\r\n  state: CategoriesState,\r\n  payload: FetchCategoriesSucceedPayload,\r\n) => ({ ...state, data: payload, error: null, loading: false });\r\n\r\nconst LoadingCategoriesFailed = (\r\n  state: CategoriesState,\r\n  payload: FetchCategoriesFailedPayload,\r\n) => ({ ...state, data: [], error: payload, loading: false });\r\n\r\nexport const categories = (\r\n  state: CategoriesState = InitialCategoriesState,\r\n  action: CategoriesAction,\r\n) => {\r\n  switch (action.type) {\r\n    case CategoriesActions.FETCH:\r\n      return LoadingCategories(state, action.payload);\r\n    case CategoriesActions.FETCH_SUCCEED:\r\n      return LoadingCategoriesSucceed(state, action.payload);\r\n    case CategoriesActions.FETCH_FAILD:\r\n      return LoadingCategoriesFailed(state, action.payload);\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","import { createContext, Dispatch } from \"react\";\r\nimport { ApplicationsAction } from \"../actions/applications\";\r\nimport { CategoriesAction } from \"../actions/categories\";\r\nimport { ApplicationsState, InitialApplicationsState } from \"../reducers/applications\";\r\nimport { CategoriesState, InitialCategoriesState } from \"../reducers/categories\";\r\n\r\ntype AppState = {\r\n  categories: CategoriesState;\r\n  applications: ApplicationsState;\r\n}\r\n\r\ntype AppDispatches = {\r\n  categories: any;\r\n  applications: any;\r\n}\r\n\r\ntype Context = {\r\n  state: AppState;\r\n  dispatches: AppDispatches\r\n}\r\n\r\nconst AppContext = createContext<Context>({\r\n  state: {\r\n    categories: InitialCategoriesState,\r\n    applications: InitialApplicationsState\r\n  },\r\n  dispatches: {\r\n    categories: () => {},\r\n    applications: () => {},\r\n  }\r\n});\r\n\r\n\r\nexport { AppContext };","import React, { FC, useContext } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { AppContext } from '../../contexts/AppContext';\r\n\r\nconst Application: FC = () => {\r\n  const {state: {applications }} = useContext(AppContext);\r\n\r\n  console.log(applications);\r\n\r\n  return (\r\n    <div>\r\n      Application {applications.loading && <>Loading...</>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Application;\r\n","export default {\r\n  repository_name: \"test-gh-page\"\r\n}","import config from \"../../config\";\r\n\r\nclass PathBuilder {\r\n  static build(path: string = '/') {\r\n    return `/${config.repository_name}${path}`\r\n  }\r\n}\r\n\r\nexport default PathBuilder;","import React, { FC, useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { AppContext } from '../../contexts/AppContext';\r\nimport PathBuilder from '../../services/PathBuilder';\r\n\r\nconst CategoriesList: FC = () => {\r\n  const {state: {categories }} = useContext(AppContext);\r\n\r\n  console.log(categories);\r\n\r\n  return (\r\n    <div>\r\n      <p>Categotries</p>\r\n      {categories.loading && <span>Loading...</span>}\r\n      <p><Link to={PathBuilder.build('/')}>HOME</Link></p>\r\n      <p><Link to={PathBuilder.build(`/${'some_category_id'}`)}>CATEGORY</Link></p>\r\n      <p><Link to={PathBuilder.build(`/${'some_category_id'}/${'some_app_id'}`)}>APPLICATION</Link></p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CategoriesList;\r\n","import React, { FC } from 'react'\r\n\r\nconst Categoty: FC = () => {\r\n  return (\r\n    <div>\r\n      Categoty\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Categoty;\r\n","import React, { FC } from 'react'\r\n\r\nconst Home: FC = () => {\r\n  return (\r\n    <div>\r\n      Home\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}