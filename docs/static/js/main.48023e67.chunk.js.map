{"version":3,"sources":["app/App.module.scss","app/actions/categories.ts","app/App.tsx","app/components/Application/Application.tsx","app/contexts/AppContext.ts","config.ts","app/services/PathBuilder.ts","app/components/CategoriesList/CategoriesList.tsx","app/components/Category/Category.tsx","app/components/Home/Home.tsx","app/reducers/categories.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","CategoriesActions","APP_ROUTES","FetchCategoriesAction","payload","type","FETCH","Application","params","useParams","console","log","AppContext","createContext","state","categories","dispatches","PathBuilder","path","config","CategoriesList","useContext","loading","to","build","Categoty","Home","InitialCategoriesState","error","data","LoadingCategories","newSate","status","LoadingCategoriesSucceed","LoadingCategoriesFailed","action","FETCH_SUCCEED","FETCH_FAILD","App","useReducer","categoriesState","categoriesDispatch","useEffect","setTimeout","Provider","value","className","styles","container","content","exact","HOME","component","CATEGORY","APPLICATION","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.48023e67.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3i0jS\",\"categories-list\":\"App_categories-list__1RlVS\",\"content\":\"App_content__SA4IH\"};","export enum CategoriesActions {\r\n  FETCH = \"CATEGORIES_FETCH\",\r\n  FETCH_SUCCEED = \"CATEGORIES_FETCH_SUCCEED\",\r\n  FETCH_FAILD = \"CATEGORIES_FETCH_FAILD\"\r\n}\r\n\r\nexport type CategoriesAction<T = any> = {\r\n  type: CategoriesActions;\r\n  payload: T;\r\n};\r\n\r\nexport type CategoriesDispatch = React.Dispatch<CategoriesAction>;\r\n\r\n// ---------------------------------\r\n\r\nexport type FetchCategoriesPayload = {status: boolean};\r\n\r\nexport const FetchCategoriesAction = (\r\n  payload: FetchCategoriesPayload,\r\n): CategoriesAction<FetchCategoriesPayload> => ({\r\n  type: CategoriesActions.FETCH,\r\n  payload,\r\n});\r\n\r\n// ---------------------------------\r\n\r\nexport type FetchCategoriesSucceedPayload = any;\r\n\r\nexport const FetchCategoriesSucceedAction = (\r\n  payload: FetchCategoriesPayload,\r\n): CategoriesAction<FetchCategoriesPayload> => ({\r\n  type: CategoriesActions.FETCH_SUCCEED,\r\n  payload,\r\n});\r\n\r\n// ---------------------------------\r\n\r\nexport type FetchCategoriesFaildPayload = any;\r\n\r\nexport const FetchCategoriesFaildAction = (\r\n  payload: FetchCategoriesPayload,\r\n): CategoriesAction<FetchCategoriesPayload> => ({\r\n  type: CategoriesActions.FETCH_FAILD,\r\n  payload,\r\n});","import React, { FC, useEffect, useReducer } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { FetchCategoriesAction } from './actions/categories';\n\nimport styles from './App.module.scss';\n\nimport Application from './components/Application/Application';\nimport CategoriesList from './components/CategoriesList/CategoriesList';\nimport Categoty from './components/Category/Category';\nimport Home from './components/Home/Home';\nimport { AppContext } from './contexts/AppContext';\nimport { categories, InitialCategoriesState } from './reducers/categories';\nimport PathBuilder from './services/PathBuilder';\n\nenum APP_ROUTES {\n  HOME = '/',\n  CATEGORY = '/:category',\n  APPLICATION = '/:category/:application',\n}\n\nconst App: FC = () => {\n  const [categoriesState, categoriesDispatch] = useReducer(categories, InitialCategoriesState);\n\n  console.log(1);\n\n  useEffect(() => {\n    console.log(2);\n    \n    categoriesDispatch(FetchCategoriesAction({status: true}));\n    console.log(3);\n    \n    setTimeout(() => {\n      console.log(4);\n      categoriesDispatch(FetchCategoriesAction({status: false}));\n      console.log(5);\n    }, 5000)\n  }, [])\n\n  return (\n    <AppContext.Provider value={\n      {\n        state: {\n          categories: categoriesState\n        },\n        dispatches: {\n          categories: categoriesDispatch\n        }\n      }\n    }>\n      <main className={styles.container}>\n        <Router>\n          <aside className={styles['categories-list']}>\n            <CategoriesList />\n          </aside>\n          <section className={styles.content}>\n            <Switch>\n              <Route exact path={PathBuilder.build(APP_ROUTES.HOME)} component={Home} />\n              <Route exact path={PathBuilder.build(APP_ROUTES.CATEGORY)} component={Categoty} />\n              <Route exact path={PathBuilder.build(APP_ROUTES.APPLICATION)} component={Application} />\n\n              <Route path=\"*\">\n                <Redirect to={PathBuilder.build(APP_ROUTES.HOME)} />\n              </Route>\n            </Switch>\n          </section>\n        </Router>\n      </main>\n    </AppContext.Provider>\n  );\n}\n\nexport default App;\n","import React, { FC } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst Application: FC = () => {\r\n  let params = useParams();\r\n\r\n  console.log(params);\r\n\r\n  return (\r\n    <div>\r\n      Application\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Application;\r\n","import { createContext } from \"react\";\r\n\r\ntype AppState = {\r\n  categories: any;\r\n}\r\n\r\ntype AppDispatches = {\r\n  categories: any;\r\n}\r\n\r\ntype Context = {\r\n  state: AppState;\r\n  dispatches: AppDispatches\r\n}\r\n\r\nconst AppContext = createContext<Context>({\r\n  state: {\r\n    categories: null\r\n  },\r\n  dispatches: {\r\n    categories: null\r\n  }\r\n});\r\n\r\n\r\nexport { AppContext };","export default {\r\n  repository_name: \"test-gh-page\"\r\n}","import config from \"../../config\";\r\n\r\nclass PathBuilder {\r\n  static build(path: string = '/') {\r\n    return `/${config.repository_name}${path}`\r\n  }\r\n}\r\n\r\nexport default PathBuilder;","import React, { FC, useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { AppContext } from '../../contexts/AppContext';\r\nimport PathBuilder from '../../services/PathBuilder';\r\n\r\nconst CategoriesList: FC = () => {\r\n  const {state: {categories }} = useContext(AppContext);\r\n\r\n  // console.log(categories);\r\n\r\n  return (\r\n    <div>\r\n      <p>Categotries</p>\r\n      {categories.loading && <span>Loading...</span>}\r\n      <p><Link to={PathBuilder.build('/')}>HOME</Link></p>\r\n      <p><Link to={PathBuilder.build(`/${'some_category_id'}`)}>CATEGORY</Link></p>\r\n      <p><Link to={PathBuilder.build(`/${'some_category_id'}/${'some_app_id'}`)}>APPLICATION</Link></p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CategoriesList;\r\n","import React, { FC } from 'react'\r\n\r\nconst Categoty: FC = () => {\r\n  return (\r\n    <div>\r\n      Categoty\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Categoty;\r\n","import React, { FC } from 'react'\r\n\r\nconst Home: FC = () => {\r\n  return (\r\n    <div>\r\n      Home\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;\r\n","import { CategoriesAction, CategoriesActions, FetchCategoriesPayload } from \"../actions/categories\";\r\n\r\ntype Category = any;\r\n\r\nexport type CategoriesState = {\r\n  loading: boolean;\r\n  error: any;\r\n  data: Category[];\r\n};\r\n\r\nexport const InitialCategoriesState: CategoriesState = {\r\n  loading: false,\r\n  error: null,\r\n  data: [],\r\n};\r\n\r\nconst LoadingCategories = (\r\n  state: CategoriesState,\r\n  payload: FetchCategoriesPayload,\r\n) => {\r\n  const newSate = { ...state, loading: payload.status };\r\n\r\n  console.log('LoadingCategories reducer ->', payload);\r\n\r\n  return newSate;\r\n};\r\n\r\nconst LoadingCategoriesSucceed = (\r\n  state: CategoriesState,\r\n  payload: FetchCategoriesPayload,\r\n) => {\r\n  const newSate = { ...state };\r\n\r\n  console.log('LoadingCategoriesSucceed reducer ->', payload);\r\n\r\n  return newSate;\r\n};\r\n\r\nconst LoadingCategoriesFailed = (\r\n  state: CategoriesState,\r\n  payload: FetchCategoriesPayload,\r\n) => {\r\n  const newSate = { ...state };\r\n\r\n  console.log('LoadingCategoriesFailed reducer ->', payload);\r\n\r\n  return newSate;\r\n};\r\n\r\nexport const categories = (\r\n  state: CategoriesState = InitialCategoriesState,\r\n  action: CategoriesAction,\r\n) => {\r\n  switch (action.type) {\r\n    case CategoriesActions.FETCH:\r\n      return LoadingCategories(state, action.payload);\r\n    case CategoriesActions.FETCH_SUCCEED:\r\n      return LoadingCategoriesSucceed(state, action.payload);\r\n    case CategoriesActions.FETCH_FAILD:\r\n      return LoadingCategoriesFailed(state, action.payload);\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}